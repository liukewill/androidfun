// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoContext.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VideoContext.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace yxcorp {
namespace gifshow {
namespace core {

namespace {

const ::google::protobuf::Descriptor* VideoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VideoContext_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_VideoContext_2eproto() {
  protobuf_AddDesc_VideoContext_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VideoContext.proto");
  GOOGLE_CHECK(file != NULL);
  VideoInfo_descriptor_ = file->message_type(0);
  static const int VideoInfo_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, cutranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, editorversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_start_cpu_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_finish_cpu_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_start_used_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_finish_used_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_start_battery_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_finish_battery_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_start_battery_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_finish_battery_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_start_is_charing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, record_finish_is_charing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, encode_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, recorder_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, hw_bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, real_fps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, filtervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, separate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, import_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, frompage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, origin_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, origin_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, origin_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, music_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, onlinemusic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, recordmusic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, encode_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, origin_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, beatsenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, rotationdegree_),
  };
  VideoInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VideoInfo_descriptor_,
      VideoInfo::internal_default_instance(),
      VideoInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(VideoInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VideoContext_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VideoInfo_descriptor_, VideoInfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VideoContext_2eproto() {
  VideoInfo_default_instance_.Shutdown();
  delete VideoInfo_reflection_;
}

void protobuf_InitDefaults_VideoContext_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  VideoInfo_default_instance_.DefaultConstruct();
  VideoInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_VideoContext_2eproto_once_);
void protobuf_InitDefaults_VideoContext_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_VideoContext_2eproto_once_,
                 &protobuf_InitDefaults_VideoContext_2eproto_impl);
}
void protobuf_AddDesc_VideoContext_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_VideoContext_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022VideoContext.proto\022\027com.yxcorp.gifshow"
    ".core\"\316\007\n\tVideoInfo\022\r\n\005theme\030\001 \001(\t\022\021\n\tcu"
    "tRanges\030\002 \001(\t\022\025\n\reditorVersion\030\003 \001(\t\022$\n\034"
    "record_start_cpu_utilization\030\004 \001(\001\022%\n\035re"
    "cord_finish_cpu_utilization\030\005 \001(\001\022\035\n\025rec"
    "ord_start_used_mem\030\006 \001(\001\022\036\n\026record_finis"
    "h_used_mem\030\007 \001(\001\022(\n record_start_battery"
    "_temperature\030\010 \001(\005\022)\n!record_finish_batt"
    "ery_temperature\030\t \001(\005\022\"\n\032record_start_ba"
    "ttery_level\030\n \001(\005\022#\n\033record_finish_batte"
    "ry_level\030\013 \001(\005\022\037\n\027record_start_is_charin"
    "g\030\014 \001(\010\022 \n\030record_finish_is_charing\030\r \001("
    "\010\022\023\n\013encode_type\030\016 \001(\t\022\025\n\rrecorder_name\030"
    "\017 \001(\t\022\022\n\nhw_bitrate\030\020 \001(\005\022\020\n\010real_fps\030\021 "
    "\001(\001\022\016\n\006Author\030\022 \001(\t\022\014\n\004Meta\030\023 \001(\t\022\016\n\006Sou"
    "rce\030\024 \001(\t\022\020\n\010Duration\030\025 \001(\003\022\014\n\004Time\030\026 \001("
    "\003\022\016\n\006Camera\030\027 \001(\t\022\016\n\006Filter\030\030 \001(\t\022\023\n\013Fil"
    "terValue\030\031 \001(\002\022\020\n\010Separate\030\032 \001(\005\022\016\n\006Impo"
    "rt\030\033 \001(\t\022\r\n\005Photo\030\034 \001(\005\022\020\n\010FromPage\030\035 \001("
    "\t\022\022\n\nCreateTime\030\036 \001(\003\022\024\n\014origin_width\030\037 "
    "\001(\005\022\025\n\rorigin_height\030  \001(\005\022\025\n\rorigin_len"
    "gth\030! \001(\003\022\021\n\tfile_path\030\" \001(\t\022\r\n\005Music\030# "
    "\001(\t\022\023\n\013OnlineMusic\030$ \001(\t\022\023\n\013RecordMusic\030"
    "% \001(\t\022\030\n\020encode_config_id\030& \001(\003\022\027\n\017origi"
    "n_duration\030\' \001(\003\022\024\n\014beatsEnabled\030( \001(\t\022\026"
    "\n\016rotationDegree\030) \001(\005B\016B\014VideoContextb\006"
    "proto3", 1046);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VideoContext.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VideoContext_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_VideoContext_2eproto_once_);
void protobuf_AddDesc_VideoContext_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_VideoContext_2eproto_once_,
                 &protobuf_AddDesc_VideoContext_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VideoContext_2eproto {
  StaticDescriptorInitializer_VideoContext_2eproto() {
    protobuf_AddDesc_VideoContext_2eproto();
  }
} static_descriptor_initializer_VideoContext_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoInfo::kThemeFieldNumber;
const int VideoInfo::kCutRangesFieldNumber;
const int VideoInfo::kEditorVersionFieldNumber;
const int VideoInfo::kRecordStartCpuUtilizationFieldNumber;
const int VideoInfo::kRecordFinishCpuUtilizationFieldNumber;
const int VideoInfo::kRecordStartUsedMemFieldNumber;
const int VideoInfo::kRecordFinishUsedMemFieldNumber;
const int VideoInfo::kRecordStartBatteryTemperatureFieldNumber;
const int VideoInfo::kRecordFinishBatteryTemperatureFieldNumber;
const int VideoInfo::kRecordStartBatteryLevelFieldNumber;
const int VideoInfo::kRecordFinishBatteryLevelFieldNumber;
const int VideoInfo::kRecordStartIsCharingFieldNumber;
const int VideoInfo::kRecordFinishIsCharingFieldNumber;
const int VideoInfo::kEncodeTypeFieldNumber;
const int VideoInfo::kRecorderNameFieldNumber;
const int VideoInfo::kHwBitrateFieldNumber;
const int VideoInfo::kRealFpsFieldNumber;
const int VideoInfo::kAuthorFieldNumber;
const int VideoInfo::kMetaFieldNumber;
const int VideoInfo::kSourceFieldNumber;
const int VideoInfo::kDurationFieldNumber;
const int VideoInfo::kTimeFieldNumber;
const int VideoInfo::kCameraFieldNumber;
const int VideoInfo::kFilterFieldNumber;
const int VideoInfo::kFilterValueFieldNumber;
const int VideoInfo::kSeparateFieldNumber;
const int VideoInfo::kImportFieldNumber;
const int VideoInfo::kPhotoFieldNumber;
const int VideoInfo::kFromPageFieldNumber;
const int VideoInfo::kCreateTimeFieldNumber;
const int VideoInfo::kOriginWidthFieldNumber;
const int VideoInfo::kOriginHeightFieldNumber;
const int VideoInfo::kOriginLengthFieldNumber;
const int VideoInfo::kFilePathFieldNumber;
const int VideoInfo::kMusicFieldNumber;
const int VideoInfo::kOnlineMusicFieldNumber;
const int VideoInfo::kRecordMusicFieldNumber;
const int VideoInfo::kEncodeConfigIdFieldNumber;
const int VideoInfo::kOriginDurationFieldNumber;
const int VideoInfo::kBeatsEnabledFieldNumber;
const int VideoInfo::kRotationDegreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoInfo::VideoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_VideoContext_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.yxcorp.gifshow.core.VideoInfo)
}

void VideoInfo::InitAsDefaultInstance() {
}

VideoInfo::VideoInfo(const VideoInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.yxcorp.gifshow.core.VideoInfo)
}

void VideoInfo::SharedCtor() {
  theme_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cutranges_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  editorversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encode_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recorder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  import_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frompage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  music_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlinemusic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordmusic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beatsenabled_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&record_start_cpu_utilization_, 0, reinterpret_cast<char*>(&origin_duration_) -
    reinterpret_cast<char*>(&record_start_cpu_utilization_) + sizeof(origin_duration_));
  _cached_size_ = 0;
}

VideoInfo::~VideoInfo() {
  // @@protoc_insertion_point(destructor:com.yxcorp.gifshow.core.VideoInfo)
  SharedDtor();
}

void VideoInfo::SharedDtor() {
  theme_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cutranges_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  editorversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encode_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recorder_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  import_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frompage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  music_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlinemusic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordmusic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beatsenabled_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoInfo_descriptor_;
}

const VideoInfo& VideoInfo::default_instance() {
  protobuf_InitDefaults_VideoContext_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VideoInfo> VideoInfo_default_instance_;

VideoInfo* VideoInfo::New(::google::protobuf::Arena* arena) const {
  VideoInfo* n = new VideoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.yxcorp.gifshow.core.VideoInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VideoInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(record_start_cpu_utilization_, record_start_battery_temperature_);
  theme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cutranges_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  editorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(record_finish_battery_temperature_, hw_bitrate_);
  encode_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recorder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(real_fps_, time_);
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(filtervalue_, createtime_);
  import_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frompage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_height_ = 0;
  ZR_(encode_config_id_, origin_duration_);
  origin_length_ = GOOGLE_LONGLONG(0);
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  music_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlinemusic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordmusic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beatsenabled_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotationdegree_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool VideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.yxcorp.gifshow.core.VideoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string theme = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.theme"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cutRanges;
        break;
      }

      // optional string cutRanges = 2;
      case 2: {
        if (tag == 18) {
         parse_cutRanges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cutranges()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cutranges().data(), this->cutranges().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.cutRanges"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_editorVersion;
        break;
      }

      // optional string editorVersion = 3;
      case 3: {
        if (tag == 26) {
         parse_editorVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_editorversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->editorversion().data(), this->editorversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.editorVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_record_start_cpu_utilization;
        break;
      }

      // optional double record_start_cpu_utilization = 4;
      case 4: {
        if (tag == 33) {
         parse_record_start_cpu_utilization:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &record_start_cpu_utilization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_record_finish_cpu_utilization;
        break;
      }

      // optional double record_finish_cpu_utilization = 5;
      case 5: {
        if (tag == 41) {
         parse_record_finish_cpu_utilization:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &record_finish_cpu_utilization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_record_start_used_mem;
        break;
      }

      // optional double record_start_used_mem = 6;
      case 6: {
        if (tag == 49) {
         parse_record_start_used_mem:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &record_start_used_mem_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_record_finish_used_mem;
        break;
      }

      // optional double record_finish_used_mem = 7;
      case 7: {
        if (tag == 57) {
         parse_record_finish_used_mem:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &record_finish_used_mem_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_record_start_battery_temperature;
        break;
      }

      // optional int32 record_start_battery_temperature = 8;
      case 8: {
        if (tag == 64) {
         parse_record_start_battery_temperature:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_start_battery_temperature_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_record_finish_battery_temperature;
        break;
      }

      // optional int32 record_finish_battery_temperature = 9;
      case 9: {
        if (tag == 72) {
         parse_record_finish_battery_temperature:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_finish_battery_temperature_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_record_start_battery_level;
        break;
      }

      // optional int32 record_start_battery_level = 10;
      case 10: {
        if (tag == 80) {
         parse_record_start_battery_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_start_battery_level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_record_finish_battery_level;
        break;
      }

      // optional int32 record_finish_battery_level = 11;
      case 11: {
        if (tag == 88) {
         parse_record_finish_battery_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_finish_battery_level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_record_start_is_charing;
        break;
      }

      // optional bool record_start_is_charing = 12;
      case 12: {
        if (tag == 96) {
         parse_record_start_is_charing:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_start_is_charing_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_record_finish_is_charing;
        break;
      }

      // optional bool record_finish_is_charing = 13;
      case 13: {
        if (tag == 104) {
         parse_record_finish_is_charing:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_finish_is_charing_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_encode_type;
        break;
      }

      // optional string encode_type = 14;
      case 14: {
        if (tag == 114) {
         parse_encode_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encode_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->encode_type().data(), this->encode_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.encode_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_recorder_name;
        break;
      }

      // optional string recorder_name = 15;
      case 15: {
        if (tag == 122) {
         parse_recorder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recorder_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recorder_name().data(), this->recorder_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.recorder_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_hw_bitrate;
        break;
      }

      // optional int32 hw_bitrate = 16;
      case 16: {
        if (tag == 128) {
         parse_hw_bitrate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hw_bitrate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_real_fps;
        break;
      }

      // optional double real_fps = 17;
      case 17: {
        if (tag == 137) {
         parse_real_fps:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_fps_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_Author;
        break;
      }

      // optional string Author = 18;
      case 18: {
        if (tag == 146) {
         parse_Author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.Author"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_Meta;
        break;
      }

      // optional string Meta = 19;
      case 19: {
        if (tag == 154) {
         parse_Meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->meta().data(), this->meta().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.Meta"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_Source;
        break;
      }

      // optional string Source = 20;
      case 20: {
        if (tag == 162) {
         parse_Source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.Source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_Duration;
        break;
      }

      // optional int64 Duration = 21;
      case 21: {
        if (tag == 168) {
         parse_Duration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_Time;
        break;
      }

      // optional int64 Time = 22;
      case 22: {
        if (tag == 176) {
         parse_Time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_Camera;
        break;
      }

      // optional string Camera = 23;
      case 23: {
        if (tag == 186) {
         parse_Camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->camera().data(), this->camera().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.Camera"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_Filter;
        break;
      }

      // optional string Filter = 24;
      case 24: {
        if (tag == 194) {
         parse_Filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.Filter"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_FilterValue;
        break;
      }

      // optional float FilterValue = 25;
      case 25: {
        if (tag == 205) {
         parse_FilterValue:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &filtervalue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_Separate;
        break;
      }

      // optional int32 Separate = 26;
      case 26: {
        if (tag == 208) {
         parse_Separate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &separate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_Import;
        break;
      }

      // optional string Import = 27;
      case 27: {
        if (tag == 218) {
         parse_Import:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_import()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->import().data(), this->import().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.Import"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_Photo;
        break;
      }

      // optional int32 Photo = 28;
      case 28: {
        if (tag == 224) {
         parse_Photo:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_FromPage;
        break;
      }

      // optional string FromPage = 29;
      case 29: {
        if (tag == 234) {
         parse_FromPage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frompage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frompage().data(), this->frompage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.FromPage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 30;
      case 30: {
        if (tag == 240) {
         parse_CreateTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_origin_width;
        break;
      }

      // optional int32 origin_width = 31;
      case 31: {
        if (tag == 248) {
         parse_origin_width:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_origin_height;
        break;
      }

      // optional int32 origin_height = 32;
      case 32: {
        if (tag == 256) {
         parse_origin_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_origin_length;
        break;
      }

      // optional int64 origin_length = 33;
      case 33: {
        if (tag == 264) {
         parse_origin_length:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &origin_length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_file_path;
        break;
      }

      // optional string file_path = 34;
      case 34: {
        if (tag == 274) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_Music;
        break;
      }

      // optional string Music = 35;
      case 35: {
        if (tag == 282) {
         parse_Music:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_music()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->music().data(), this->music().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.Music"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_OnlineMusic;
        break;
      }

      // optional string OnlineMusic = 36;
      case 36: {
        if (tag == 290) {
         parse_OnlineMusic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onlinemusic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->onlinemusic().data(), this->onlinemusic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.OnlineMusic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_RecordMusic;
        break;
      }

      // optional string RecordMusic = 37;
      case 37: {
        if (tag == 298) {
         parse_RecordMusic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordmusic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recordmusic().data(), this->recordmusic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.RecordMusic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_encode_config_id;
        break;
      }

      // optional int64 encode_config_id = 38;
      case 38: {
        if (tag == 304) {
         parse_encode_config_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &encode_config_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_origin_duration;
        break;
      }

      // optional int64 origin_duration = 39;
      case 39: {
        if (tag == 312) {
         parse_origin_duration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &origin_duration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_beatsEnabled;
        break;
      }

      // optional string beatsEnabled = 40;
      case 40: {
        if (tag == 322) {
         parse_beatsEnabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beatsenabled()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->beatsenabled().data(), this->beatsenabled().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.yxcorp.gifshow.core.VideoInfo.beatsEnabled"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_rotationDegree;
        break;
      }

      // optional int32 rotationDegree = 41;
      case 41: {
        if (tag == 328) {
         parse_rotationDegree:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotationdegree_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.yxcorp.gifshow.core.VideoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.yxcorp.gifshow.core.VideoInfo)
  return false;
#undef DO_
}

void VideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.yxcorp.gifshow.core.VideoInfo)
  // optional string theme = 1;
  if (this->theme().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.theme");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->theme(), output);
  }

  // optional string cutRanges = 2;
  if (this->cutranges().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cutranges().data(), this->cutranges().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.cutRanges");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cutranges(), output);
  }

  // optional string editorVersion = 3;
  if (this->editorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->editorversion().data(), this->editorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.editorVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->editorversion(), output);
  }

  // optional double record_start_cpu_utilization = 4;
  if (this->record_start_cpu_utilization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->record_start_cpu_utilization(), output);
  }

  // optional double record_finish_cpu_utilization = 5;
  if (this->record_finish_cpu_utilization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->record_finish_cpu_utilization(), output);
  }

  // optional double record_start_used_mem = 6;
  if (this->record_start_used_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->record_start_used_mem(), output);
  }

  // optional double record_finish_used_mem = 7;
  if (this->record_finish_used_mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->record_finish_used_mem(), output);
  }

  // optional int32 record_start_battery_temperature = 8;
  if (this->record_start_battery_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->record_start_battery_temperature(), output);
  }

  // optional int32 record_finish_battery_temperature = 9;
  if (this->record_finish_battery_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->record_finish_battery_temperature(), output);
  }

  // optional int32 record_start_battery_level = 10;
  if (this->record_start_battery_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->record_start_battery_level(), output);
  }

  // optional int32 record_finish_battery_level = 11;
  if (this->record_finish_battery_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->record_finish_battery_level(), output);
  }

  // optional bool record_start_is_charing = 12;
  if (this->record_start_is_charing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->record_start_is_charing(), output);
  }

  // optional bool record_finish_is_charing = 13;
  if (this->record_finish_is_charing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->record_finish_is_charing(), output);
  }

  // optional string encode_type = 14;
  if (this->encode_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encode_type().data(), this->encode_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.encode_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->encode_type(), output);
  }

  // optional string recorder_name = 15;
  if (this->recorder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recorder_name().data(), this->recorder_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.recorder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->recorder_name(), output);
  }

  // optional int32 hw_bitrate = 16;
  if (this->hw_bitrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hw_bitrate(), output);
  }

  // optional double real_fps = 17;
  if (this->real_fps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->real_fps(), output);
  }

  // optional string Author = 18;
  if (this->author().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->author(), output);
  }

  // optional string Meta = 19;
  if (this->meta().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->meta().data(), this->meta().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Meta");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->meta(), output);
  }

  // optional string Source = 20;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->source(), output);
  }

  // optional int64 Duration = 21;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->duration(), output);
  }

  // optional int64 Time = 22;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->time(), output);
  }

  // optional string Camera = 23;
  if (this->camera().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Camera");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->camera(), output);
  }

  // optional string Filter = 24;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->filter(), output);
  }

  // optional float FilterValue = 25;
  if (this->filtervalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->filtervalue(), output);
  }

  // optional int32 Separate = 26;
  if (this->separate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->separate(), output);
  }

  // optional string Import = 27;
  if (this->import().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->import().data(), this->import().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Import");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->import(), output);
  }

  // optional int32 Photo = 28;
  if (this->photo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->photo(), output);
  }

  // optional string FromPage = 29;
  if (this->frompage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frompage().data(), this->frompage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.FromPage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->frompage(), output);
  }

  // optional int64 CreateTime = 30;
  if (this->createtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->createtime(), output);
  }

  // optional int32 origin_width = 31;
  if (this->origin_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->origin_width(), output);
  }

  // optional int32 origin_height = 32;
  if (this->origin_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->origin_height(), output);
  }

  // optional int64 origin_length = 33;
  if (this->origin_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->origin_length(), output);
  }

  // optional string file_path = 34;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->file_path(), output);
  }

  // optional string Music = 35;
  if (this->music().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->music().data(), this->music().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Music");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->music(), output);
  }

  // optional string OnlineMusic = 36;
  if (this->onlinemusic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->onlinemusic().data(), this->onlinemusic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.OnlineMusic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->onlinemusic(), output);
  }

  // optional string RecordMusic = 37;
  if (this->recordmusic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recordmusic().data(), this->recordmusic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.RecordMusic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->recordmusic(), output);
  }

  // optional int64 encode_config_id = 38;
  if (this->encode_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->encode_config_id(), output);
  }

  // optional int64 origin_duration = 39;
  if (this->origin_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->origin_duration(), output);
  }

  // optional string beatsEnabled = 40;
  if (this->beatsenabled().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->beatsenabled().data(), this->beatsenabled().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.beatsEnabled");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->beatsenabled(), output);
  }

  // optional int32 rotationDegree = 41;
  if (this->rotationdegree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->rotationdegree(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.yxcorp.gifshow.core.VideoInfo)
}

::google::protobuf::uint8* VideoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.yxcorp.gifshow.core.VideoInfo)
  // optional string theme = 1;
  if (this->theme().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.theme");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->theme(), target);
  }

  // optional string cutRanges = 2;
  if (this->cutranges().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cutranges().data(), this->cutranges().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.cutRanges");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cutranges(), target);
  }

  // optional string editorVersion = 3;
  if (this->editorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->editorversion().data(), this->editorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.editorVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->editorversion(), target);
  }

  // optional double record_start_cpu_utilization = 4;
  if (this->record_start_cpu_utilization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->record_start_cpu_utilization(), target);
  }

  // optional double record_finish_cpu_utilization = 5;
  if (this->record_finish_cpu_utilization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->record_finish_cpu_utilization(), target);
  }

  // optional double record_start_used_mem = 6;
  if (this->record_start_used_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->record_start_used_mem(), target);
  }

  // optional double record_finish_used_mem = 7;
  if (this->record_finish_used_mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->record_finish_used_mem(), target);
  }

  // optional int32 record_start_battery_temperature = 8;
  if (this->record_start_battery_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->record_start_battery_temperature(), target);
  }

  // optional int32 record_finish_battery_temperature = 9;
  if (this->record_finish_battery_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->record_finish_battery_temperature(), target);
  }

  // optional int32 record_start_battery_level = 10;
  if (this->record_start_battery_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->record_start_battery_level(), target);
  }

  // optional int32 record_finish_battery_level = 11;
  if (this->record_finish_battery_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->record_finish_battery_level(), target);
  }

  // optional bool record_start_is_charing = 12;
  if (this->record_start_is_charing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->record_start_is_charing(), target);
  }

  // optional bool record_finish_is_charing = 13;
  if (this->record_finish_is_charing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->record_finish_is_charing(), target);
  }

  // optional string encode_type = 14;
  if (this->encode_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encode_type().data(), this->encode_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.encode_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->encode_type(), target);
  }

  // optional string recorder_name = 15;
  if (this->recorder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recorder_name().data(), this->recorder_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.recorder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->recorder_name(), target);
  }

  // optional int32 hw_bitrate = 16;
  if (this->hw_bitrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hw_bitrate(), target);
  }

  // optional double real_fps = 17;
  if (this->real_fps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->real_fps(), target);
  }

  // optional string Author = 18;
  if (this->author().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->author(), target);
  }

  // optional string Meta = 19;
  if (this->meta().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->meta().data(), this->meta().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Meta");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->meta(), target);
  }

  // optional string Source = 20;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->source(), target);
  }

  // optional int64 Duration = 21;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->duration(), target);
  }

  // optional int64 Time = 22;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->time(), target);
  }

  // optional string Camera = 23;
  if (this->camera().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Camera");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->camera(), target);
  }

  // optional string Filter = 24;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->filter(), target);
  }

  // optional float FilterValue = 25;
  if (this->filtervalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->filtervalue(), target);
  }

  // optional int32 Separate = 26;
  if (this->separate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->separate(), target);
  }

  // optional string Import = 27;
  if (this->import().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->import().data(), this->import().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Import");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->import(), target);
  }

  // optional int32 Photo = 28;
  if (this->photo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->photo(), target);
  }

  // optional string FromPage = 29;
  if (this->frompage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frompage().data(), this->frompage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.FromPage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->frompage(), target);
  }

  // optional int64 CreateTime = 30;
  if (this->createtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->createtime(), target);
  }

  // optional int32 origin_width = 31;
  if (this->origin_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->origin_width(), target);
  }

  // optional int32 origin_height = 32;
  if (this->origin_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->origin_height(), target);
  }

  // optional int64 origin_length = 33;
  if (this->origin_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->origin_length(), target);
  }

  // optional string file_path = 34;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->file_path(), target);
  }

  // optional string Music = 35;
  if (this->music().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->music().data(), this->music().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.Music");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->music(), target);
  }

  // optional string OnlineMusic = 36;
  if (this->onlinemusic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->onlinemusic().data(), this->onlinemusic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.OnlineMusic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->onlinemusic(), target);
  }

  // optional string RecordMusic = 37;
  if (this->recordmusic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recordmusic().data(), this->recordmusic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.RecordMusic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->recordmusic(), target);
  }

  // optional int64 encode_config_id = 38;
  if (this->encode_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->encode_config_id(), target);
  }

  // optional int64 origin_duration = 39;
  if (this->origin_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->origin_duration(), target);
  }

  // optional string beatsEnabled = 40;
  if (this->beatsenabled().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->beatsenabled().data(), this->beatsenabled().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.yxcorp.gifshow.core.VideoInfo.beatsEnabled");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->beatsenabled(), target);
  }

  // optional int32 rotationDegree = 41;
  if (this->rotationdegree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->rotationdegree(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.yxcorp.gifshow.core.VideoInfo)
  return target;
}

size_t VideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.yxcorp.gifshow.core.VideoInfo)
  size_t total_size = 0;

  // optional string theme = 1;
  if (this->theme().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->theme());
  }

  // optional string cutRanges = 2;
  if (this->cutranges().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cutranges());
  }

  // optional string editorVersion = 3;
  if (this->editorversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->editorversion());
  }

  // optional double record_start_cpu_utilization = 4;
  if (this->record_start_cpu_utilization() != 0) {
    total_size += 1 + 8;
  }

  // optional double record_finish_cpu_utilization = 5;
  if (this->record_finish_cpu_utilization() != 0) {
    total_size += 1 + 8;
  }

  // optional double record_start_used_mem = 6;
  if (this->record_start_used_mem() != 0) {
    total_size += 1 + 8;
  }

  // optional double record_finish_used_mem = 7;
  if (this->record_finish_used_mem() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 record_start_battery_temperature = 8;
  if (this->record_start_battery_temperature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->record_start_battery_temperature());
  }

  // optional int32 record_finish_battery_temperature = 9;
  if (this->record_finish_battery_temperature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->record_finish_battery_temperature());
  }

  // optional int32 record_start_battery_level = 10;
  if (this->record_start_battery_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->record_start_battery_level());
  }

  // optional int32 record_finish_battery_level = 11;
  if (this->record_finish_battery_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->record_finish_battery_level());
  }

  // optional bool record_start_is_charing = 12;
  if (this->record_start_is_charing() != 0) {
    total_size += 1 + 1;
  }

  // optional bool record_finish_is_charing = 13;
  if (this->record_finish_is_charing() != 0) {
    total_size += 1 + 1;
  }

  // optional string encode_type = 14;
  if (this->encode_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->encode_type());
  }

  // optional string recorder_name = 15;
  if (this->recorder_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recorder_name());
  }

  // optional int32 hw_bitrate = 16;
  if (this->hw_bitrate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hw_bitrate());
  }

  // optional double real_fps = 17;
  if (this->real_fps() != 0) {
    total_size += 2 + 8;
  }

  // optional string Author = 18;
  if (this->author().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author());
  }

  // optional string Meta = 19;
  if (this->meta().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->meta());
  }

  // optional string Source = 20;
  if (this->source().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional int64 Duration = 21;
  if (this->duration() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration());
  }

  // optional int64 Time = 22;
  if (this->time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional string Camera = 23;
  if (this->camera().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera());
  }

  // optional string Filter = 24;
  if (this->filter().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // optional float FilterValue = 25;
  if (this->filtervalue() != 0) {
    total_size += 2 + 4;
  }

  // optional int32 Separate = 26;
  if (this->separate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->separate());
  }

  // optional string Import = 27;
  if (this->import().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->import());
  }

  // optional int32 Photo = 28;
  if (this->photo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->photo());
  }

  // optional string FromPage = 29;
  if (this->frompage().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frompage());
  }

  // optional int64 CreateTime = 30;
  if (this->createtime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->createtime());
  }

  // optional int32 origin_width = 31;
  if (this->origin_width() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->origin_width());
  }

  // optional int32 origin_height = 32;
  if (this->origin_height() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->origin_height());
  }

  // optional int64 origin_length = 33;
  if (this->origin_length() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->origin_length());
  }

  // optional string file_path = 34;
  if (this->file_path().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // optional string Music = 35;
  if (this->music().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->music());
  }

  // optional string OnlineMusic = 36;
  if (this->onlinemusic().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->onlinemusic());
  }

  // optional string RecordMusic = 37;
  if (this->recordmusic().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recordmusic());
  }

  // optional int64 encode_config_id = 38;
  if (this->encode_config_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->encode_config_id());
  }

  // optional int64 origin_duration = 39;
  if (this->origin_duration() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->origin_duration());
  }

  // optional string beatsEnabled = 40;
  if (this->beatsenabled().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->beatsenabled());
  }

  // optional int32 rotationDegree = 41;
  if (this->rotationdegree() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rotationdegree());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.yxcorp.gifshow.core.VideoInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VideoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.yxcorp.gifshow.core.VideoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.yxcorp.gifshow.core.VideoInfo)
    UnsafeMergeFrom(*source);
  }
}

void VideoInfo::MergeFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.yxcorp.gifshow.core.VideoInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VideoInfo::UnsafeMergeFrom(const VideoInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.theme().size() > 0) {

    theme_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.theme_);
  }
  if (from.cutranges().size() > 0) {

    cutranges_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cutranges_);
  }
  if (from.editorversion().size() > 0) {

    editorversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.editorversion_);
  }
  if (from.record_start_cpu_utilization() != 0) {
    set_record_start_cpu_utilization(from.record_start_cpu_utilization());
  }
  if (from.record_finish_cpu_utilization() != 0) {
    set_record_finish_cpu_utilization(from.record_finish_cpu_utilization());
  }
  if (from.record_start_used_mem() != 0) {
    set_record_start_used_mem(from.record_start_used_mem());
  }
  if (from.record_finish_used_mem() != 0) {
    set_record_finish_used_mem(from.record_finish_used_mem());
  }
  if (from.record_start_battery_temperature() != 0) {
    set_record_start_battery_temperature(from.record_start_battery_temperature());
  }
  if (from.record_finish_battery_temperature() != 0) {
    set_record_finish_battery_temperature(from.record_finish_battery_temperature());
  }
  if (from.record_start_battery_level() != 0) {
    set_record_start_battery_level(from.record_start_battery_level());
  }
  if (from.record_finish_battery_level() != 0) {
    set_record_finish_battery_level(from.record_finish_battery_level());
  }
  if (from.record_start_is_charing() != 0) {
    set_record_start_is_charing(from.record_start_is_charing());
  }
  if (from.record_finish_is_charing() != 0) {
    set_record_finish_is_charing(from.record_finish_is_charing());
  }
  if (from.encode_type().size() > 0) {

    encode_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encode_type_);
  }
  if (from.recorder_name().size() > 0) {

    recorder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recorder_name_);
  }
  if (from.hw_bitrate() != 0) {
    set_hw_bitrate(from.hw_bitrate());
  }
  if (from.real_fps() != 0) {
    set_real_fps(from.real_fps());
  }
  if (from.author().size() > 0) {

    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  if (from.meta().size() > 0) {

    meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meta_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.camera().size() > 0) {

    camera_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.filtervalue() != 0) {
    set_filtervalue(from.filtervalue());
  }
  if (from.separate() != 0) {
    set_separate(from.separate());
  }
  if (from.import().size() > 0) {

    import_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.import_);
  }
  if (from.photo() != 0) {
    set_photo(from.photo());
  }
  if (from.frompage().size() > 0) {

    frompage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frompage_);
  }
  if (from.createtime() != 0) {
    set_createtime(from.createtime());
  }
  if (from.origin_width() != 0) {
    set_origin_width(from.origin_width());
  }
  if (from.origin_height() != 0) {
    set_origin_height(from.origin_height());
  }
  if (from.origin_length() != 0) {
    set_origin_length(from.origin_length());
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.music().size() > 0) {

    music_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.music_);
  }
  if (from.onlinemusic().size() > 0) {

    onlinemusic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.onlinemusic_);
  }
  if (from.recordmusic().size() > 0) {

    recordmusic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recordmusic_);
  }
  if (from.encode_config_id() != 0) {
    set_encode_config_id(from.encode_config_id());
  }
  if (from.origin_duration() != 0) {
    set_origin_duration(from.origin_duration());
  }
  if (from.beatsenabled().size() > 0) {

    beatsenabled_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.beatsenabled_);
  }
  if (from.rotationdegree() != 0) {
    set_rotationdegree(from.rotationdegree());
  }
}

void VideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.yxcorp.gifshow.core.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoInfo::CopyFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.yxcorp.gifshow.core.VideoInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VideoInfo::IsInitialized() const {

  return true;
}

void VideoInfo::Swap(VideoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoInfo::InternalSwap(VideoInfo* other) {
  theme_.Swap(&other->theme_);
  cutranges_.Swap(&other->cutranges_);
  editorversion_.Swap(&other->editorversion_);
  std::swap(record_start_cpu_utilization_, other->record_start_cpu_utilization_);
  std::swap(record_finish_cpu_utilization_, other->record_finish_cpu_utilization_);
  std::swap(record_start_used_mem_, other->record_start_used_mem_);
  std::swap(record_finish_used_mem_, other->record_finish_used_mem_);
  std::swap(record_start_battery_temperature_, other->record_start_battery_temperature_);
  std::swap(record_finish_battery_temperature_, other->record_finish_battery_temperature_);
  std::swap(record_start_battery_level_, other->record_start_battery_level_);
  std::swap(record_finish_battery_level_, other->record_finish_battery_level_);
  std::swap(record_start_is_charing_, other->record_start_is_charing_);
  std::swap(record_finish_is_charing_, other->record_finish_is_charing_);
  encode_type_.Swap(&other->encode_type_);
  recorder_name_.Swap(&other->recorder_name_);
  std::swap(hw_bitrate_, other->hw_bitrate_);
  std::swap(real_fps_, other->real_fps_);
  author_.Swap(&other->author_);
  meta_.Swap(&other->meta_);
  source_.Swap(&other->source_);
  std::swap(duration_, other->duration_);
  std::swap(time_, other->time_);
  camera_.Swap(&other->camera_);
  filter_.Swap(&other->filter_);
  std::swap(filtervalue_, other->filtervalue_);
  std::swap(separate_, other->separate_);
  import_.Swap(&other->import_);
  std::swap(photo_, other->photo_);
  frompage_.Swap(&other->frompage_);
  std::swap(createtime_, other->createtime_);
  std::swap(origin_width_, other->origin_width_);
  std::swap(origin_height_, other->origin_height_);
  std::swap(origin_length_, other->origin_length_);
  file_path_.Swap(&other->file_path_);
  music_.Swap(&other->music_);
  onlinemusic_.Swap(&other->onlinemusic_);
  recordmusic_.Swap(&other->recordmusic_);
  std::swap(encode_config_id_, other->encode_config_id_);
  std::swap(origin_duration_, other->origin_duration_);
  beatsenabled_.Swap(&other->beatsenabled_);
  std::swap(rotationdegree_, other->rotationdegree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoInfo_descriptor_;
  metadata.reflection = VideoInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoInfo

// optional string theme = 1;
void VideoInfo::clear_theme() {
  theme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::theme() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.theme)
  return theme_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_theme(const ::std::string& value) {
  
  theme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.theme)
}
void VideoInfo::set_theme(const char* value) {
  
  theme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.theme)
}
void VideoInfo::set_theme(const char* value, size_t size) {
  
  theme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.theme)
}
::std::string* VideoInfo::mutable_theme() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.theme)
  return theme_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_theme() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.theme)
  
  return theme_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_theme(::std::string* theme) {
  if (theme != NULL) {
    
  } else {
    
  }
  theme_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), theme);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.theme)
}

// optional string cutRanges = 2;
void VideoInfo::clear_cutranges() {
  cutranges_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::cutranges() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
  return cutranges_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_cutranges(const ::std::string& value) {
  
  cutranges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
}
void VideoInfo::set_cutranges(const char* value) {
  
  cutranges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
}
void VideoInfo::set_cutranges(const char* value, size_t size) {
  
  cutranges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
}
::std::string* VideoInfo::mutable_cutranges() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
  return cutranges_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_cutranges() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
  
  return cutranges_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_cutranges(::std::string* cutranges) {
  if (cutranges != NULL) {
    
  } else {
    
  }
  cutranges_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cutranges);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
}

// optional string editorVersion = 3;
void VideoInfo::clear_editorversion() {
  editorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::editorversion() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
  return editorversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_editorversion(const ::std::string& value) {
  
  editorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
}
void VideoInfo::set_editorversion(const char* value) {
  
  editorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
}
void VideoInfo::set_editorversion(const char* value, size_t size) {
  
  editorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
}
::std::string* VideoInfo::mutable_editorversion() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
  return editorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_editorversion() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
  
  return editorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_editorversion(::std::string* editorversion) {
  if (editorversion != NULL) {
    
  } else {
    
  }
  editorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), editorversion);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
}

// optional double record_start_cpu_utilization = 4;
void VideoInfo::clear_record_start_cpu_utilization() {
  record_start_cpu_utilization_ = 0;
}
double VideoInfo::record_start_cpu_utilization() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_cpu_utilization)
  return record_start_cpu_utilization_;
}
void VideoInfo::set_record_start_cpu_utilization(double value) {
  
  record_start_cpu_utilization_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_cpu_utilization)
}

// optional double record_finish_cpu_utilization = 5;
void VideoInfo::clear_record_finish_cpu_utilization() {
  record_finish_cpu_utilization_ = 0;
}
double VideoInfo::record_finish_cpu_utilization() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_cpu_utilization)
  return record_finish_cpu_utilization_;
}
void VideoInfo::set_record_finish_cpu_utilization(double value) {
  
  record_finish_cpu_utilization_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_cpu_utilization)
}

// optional double record_start_used_mem = 6;
void VideoInfo::clear_record_start_used_mem() {
  record_start_used_mem_ = 0;
}
double VideoInfo::record_start_used_mem() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_used_mem)
  return record_start_used_mem_;
}
void VideoInfo::set_record_start_used_mem(double value) {
  
  record_start_used_mem_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_used_mem)
}

// optional double record_finish_used_mem = 7;
void VideoInfo::clear_record_finish_used_mem() {
  record_finish_used_mem_ = 0;
}
double VideoInfo::record_finish_used_mem() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_used_mem)
  return record_finish_used_mem_;
}
void VideoInfo::set_record_finish_used_mem(double value) {
  
  record_finish_used_mem_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_used_mem)
}

// optional int32 record_start_battery_temperature = 8;
void VideoInfo::clear_record_start_battery_temperature() {
  record_start_battery_temperature_ = 0;
}
::google::protobuf::int32 VideoInfo::record_start_battery_temperature() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_battery_temperature)
  return record_start_battery_temperature_;
}
void VideoInfo::set_record_start_battery_temperature(::google::protobuf::int32 value) {
  
  record_start_battery_temperature_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_battery_temperature)
}

// optional int32 record_finish_battery_temperature = 9;
void VideoInfo::clear_record_finish_battery_temperature() {
  record_finish_battery_temperature_ = 0;
}
::google::protobuf::int32 VideoInfo::record_finish_battery_temperature() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_battery_temperature)
  return record_finish_battery_temperature_;
}
void VideoInfo::set_record_finish_battery_temperature(::google::protobuf::int32 value) {
  
  record_finish_battery_temperature_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_battery_temperature)
}

// optional int32 record_start_battery_level = 10;
void VideoInfo::clear_record_start_battery_level() {
  record_start_battery_level_ = 0;
}
::google::protobuf::int32 VideoInfo::record_start_battery_level() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_battery_level)
  return record_start_battery_level_;
}
void VideoInfo::set_record_start_battery_level(::google::protobuf::int32 value) {
  
  record_start_battery_level_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_battery_level)
}

// optional int32 record_finish_battery_level = 11;
void VideoInfo::clear_record_finish_battery_level() {
  record_finish_battery_level_ = 0;
}
::google::protobuf::int32 VideoInfo::record_finish_battery_level() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_battery_level)
  return record_finish_battery_level_;
}
void VideoInfo::set_record_finish_battery_level(::google::protobuf::int32 value) {
  
  record_finish_battery_level_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_battery_level)
}

// optional bool record_start_is_charing = 12;
void VideoInfo::clear_record_start_is_charing() {
  record_start_is_charing_ = false;
}
bool VideoInfo::record_start_is_charing() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_is_charing)
  return record_start_is_charing_;
}
void VideoInfo::set_record_start_is_charing(bool value) {
  
  record_start_is_charing_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_is_charing)
}

// optional bool record_finish_is_charing = 13;
void VideoInfo::clear_record_finish_is_charing() {
  record_finish_is_charing_ = false;
}
bool VideoInfo::record_finish_is_charing() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_is_charing)
  return record_finish_is_charing_;
}
void VideoInfo::set_record_finish_is_charing(bool value) {
  
  record_finish_is_charing_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_is_charing)
}

// optional string encode_type = 14;
void VideoInfo::clear_encode_type() {
  encode_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::encode_type() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.encode_type)
  return encode_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_encode_type(const ::std::string& value) {
  
  encode_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.encode_type)
}
void VideoInfo::set_encode_type(const char* value) {
  
  encode_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.encode_type)
}
void VideoInfo::set_encode_type(const char* value, size_t size) {
  
  encode_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.encode_type)
}
::std::string* VideoInfo::mutable_encode_type() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.encode_type)
  return encode_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_encode_type() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.encode_type)
  
  return encode_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_encode_type(::std::string* encode_type) {
  if (encode_type != NULL) {
    
  } else {
    
  }
  encode_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encode_type);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.encode_type)
}

// optional string recorder_name = 15;
void VideoInfo::clear_recorder_name() {
  recorder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::recorder_name() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
  return recorder_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_recorder_name(const ::std::string& value) {
  
  recorder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
}
void VideoInfo::set_recorder_name(const char* value) {
  
  recorder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
}
void VideoInfo::set_recorder_name(const char* value, size_t size) {
  
  recorder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
}
::std::string* VideoInfo::mutable_recorder_name() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
  return recorder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_recorder_name() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
  
  return recorder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_recorder_name(::std::string* recorder_name) {
  if (recorder_name != NULL) {
    
  } else {
    
  }
  recorder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recorder_name);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
}

// optional int32 hw_bitrate = 16;
void VideoInfo::clear_hw_bitrate() {
  hw_bitrate_ = 0;
}
::google::protobuf::int32 VideoInfo::hw_bitrate() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.hw_bitrate)
  return hw_bitrate_;
}
void VideoInfo::set_hw_bitrate(::google::protobuf::int32 value) {
  
  hw_bitrate_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.hw_bitrate)
}

// optional double real_fps = 17;
void VideoInfo::clear_real_fps() {
  real_fps_ = 0;
}
double VideoInfo::real_fps() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.real_fps)
  return real_fps_;
}
void VideoInfo::set_real_fps(double value) {
  
  real_fps_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.real_fps)
}

// optional string Author = 18;
void VideoInfo::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::author() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Author)
  return author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Author)
}
void VideoInfo::set_author(const char* value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Author)
}
void VideoInfo::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Author)
}
::std::string* VideoInfo::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_author() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Author)
}

// optional string Meta = 19;
void VideoInfo::clear_meta() {
  meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::meta() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Meta)
  return meta_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_meta(const ::std::string& value) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Meta)
}
void VideoInfo::set_meta(const char* value) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Meta)
}
void VideoInfo::set_meta(const char* value, size_t size) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Meta)
}
::std::string* VideoInfo::mutable_meta() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Meta)
  return meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_meta() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Meta)
  
  return meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_meta(::std::string* meta) {
  if (meta != NULL) {
    
  } else {
    
  }
  meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meta);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Meta)
}

// optional string Source = 20;
void VideoInfo::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::source() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Source)
}
void VideoInfo::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Source)
}
void VideoInfo::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Source)
}
::std::string* VideoInfo::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_source() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Source)
}

// optional int64 Duration = 21;
void VideoInfo::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VideoInfo::duration() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Duration)
  return duration_;
}
void VideoInfo::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Duration)
}

// optional int64 Time = 22;
void VideoInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VideoInfo::time() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Time)
  return time_;
}
void VideoInfo::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Time)
}

// optional string Camera = 23;
void VideoInfo::clear_camera() {
  camera_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::camera() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Camera)
  return camera_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_camera(const ::std::string& value) {
  
  camera_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Camera)
}
void VideoInfo::set_camera(const char* value) {
  
  camera_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Camera)
}
void VideoInfo::set_camera(const char* value, size_t size) {
  
  camera_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Camera)
}
::std::string* VideoInfo::mutable_camera() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Camera)
  return camera_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_camera() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Camera)
  
  return camera_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_camera(::std::string* camera) {
  if (camera != NULL) {
    
  } else {
    
  }
  camera_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Camera)
}

// optional string Filter = 24;
void VideoInfo::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::filter() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Filter)
}
void VideoInfo::set_filter(const char* value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Filter)
}
void VideoInfo::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Filter)
}
::std::string* VideoInfo::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_filter() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Filter)
}

// optional float FilterValue = 25;
void VideoInfo::clear_filtervalue() {
  filtervalue_ = 0;
}
float VideoInfo::filtervalue() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.FilterValue)
  return filtervalue_;
}
void VideoInfo::set_filtervalue(float value) {
  
  filtervalue_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.FilterValue)
}

// optional int32 Separate = 26;
void VideoInfo::clear_separate() {
  separate_ = 0;
}
::google::protobuf::int32 VideoInfo::separate() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Separate)
  return separate_;
}
void VideoInfo::set_separate(::google::protobuf::int32 value) {
  
  separate_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Separate)
}

// optional string Import = 27;
void VideoInfo::clear_import() {
  import_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::import() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Import)
  return import_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_import(const ::std::string& value) {
  
  import_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Import)
}
void VideoInfo::set_import(const char* value) {
  
  import_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Import)
}
void VideoInfo::set_import(const char* value, size_t size) {
  
  import_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Import)
}
::std::string* VideoInfo::mutable_import() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Import)
  return import_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_import() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Import)
  
  return import_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_import(::std::string* import) {
  if (import != NULL) {
    
  } else {
    
  }
  import_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), import);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Import)
}

// optional int32 Photo = 28;
void VideoInfo::clear_photo() {
  photo_ = 0;
}
::google::protobuf::int32 VideoInfo::photo() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Photo)
  return photo_;
}
void VideoInfo::set_photo(::google::protobuf::int32 value) {
  
  photo_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Photo)
}

// optional string FromPage = 29;
void VideoInfo::clear_frompage() {
  frompage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::frompage() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.FromPage)
  return frompage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_frompage(const ::std::string& value) {
  
  frompage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.FromPage)
}
void VideoInfo::set_frompage(const char* value) {
  
  frompage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.FromPage)
}
void VideoInfo::set_frompage(const char* value, size_t size) {
  
  frompage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.FromPage)
}
::std::string* VideoInfo::mutable_frompage() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.FromPage)
  return frompage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_frompage() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.FromPage)
  
  return frompage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_frompage(::std::string* frompage) {
  if (frompage != NULL) {
    
  } else {
    
  }
  frompage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frompage);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.FromPage)
}

// optional int64 CreateTime = 30;
void VideoInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VideoInfo::createtime() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.CreateTime)
  return createtime_;
}
void VideoInfo::set_createtime(::google::protobuf::int64 value) {
  
  createtime_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.CreateTime)
}

// optional int32 origin_width = 31;
void VideoInfo::clear_origin_width() {
  origin_width_ = 0;
}
::google::protobuf::int32 VideoInfo::origin_width() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.origin_width)
  return origin_width_;
}
void VideoInfo::set_origin_width(::google::protobuf::int32 value) {
  
  origin_width_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.origin_width)
}

// optional int32 origin_height = 32;
void VideoInfo::clear_origin_height() {
  origin_height_ = 0;
}
::google::protobuf::int32 VideoInfo::origin_height() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.origin_height)
  return origin_height_;
}
void VideoInfo::set_origin_height(::google::protobuf::int32 value) {
  
  origin_height_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.origin_height)
}

// optional int64 origin_length = 33;
void VideoInfo::clear_origin_length() {
  origin_length_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VideoInfo::origin_length() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.origin_length)
  return origin_length_;
}
void VideoInfo::set_origin_length(::google::protobuf::int64 value) {
  
  origin_length_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.origin_length)
}

// optional string file_path = 34;
void VideoInfo::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::file_path() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.file_path)
}
void VideoInfo::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.file_path)
}
void VideoInfo::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.file_path)
}
::std::string* VideoInfo::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_file_path() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.file_path)
}

// optional string Music = 35;
void VideoInfo::clear_music() {
  music_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::music() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Music)
  return music_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_music(const ::std::string& value) {
  
  music_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Music)
}
void VideoInfo::set_music(const char* value) {
  
  music_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Music)
}
void VideoInfo::set_music(const char* value, size_t size) {
  
  music_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Music)
}
::std::string* VideoInfo::mutable_music() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Music)
  return music_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_music() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Music)
  
  return music_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_music(::std::string* music) {
  if (music != NULL) {
    
  } else {
    
  }
  music_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), music);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Music)
}

// optional string OnlineMusic = 36;
void VideoInfo::clear_onlinemusic() {
  onlinemusic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::onlinemusic() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
  return onlinemusic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_onlinemusic(const ::std::string& value) {
  
  onlinemusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
}
void VideoInfo::set_onlinemusic(const char* value) {
  
  onlinemusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
}
void VideoInfo::set_onlinemusic(const char* value, size_t size) {
  
  onlinemusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
}
::std::string* VideoInfo::mutable_onlinemusic() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
  return onlinemusic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_onlinemusic() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
  
  return onlinemusic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_onlinemusic(::std::string* onlinemusic) {
  if (onlinemusic != NULL) {
    
  } else {
    
  }
  onlinemusic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onlinemusic);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
}

// optional string RecordMusic = 37;
void VideoInfo::clear_recordmusic() {
  recordmusic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::recordmusic() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
  return recordmusic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_recordmusic(const ::std::string& value) {
  
  recordmusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
}
void VideoInfo::set_recordmusic(const char* value) {
  
  recordmusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
}
void VideoInfo::set_recordmusic(const char* value, size_t size) {
  
  recordmusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
}
::std::string* VideoInfo::mutable_recordmusic() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
  return recordmusic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_recordmusic() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
  
  return recordmusic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_recordmusic(::std::string* recordmusic) {
  if (recordmusic != NULL) {
    
  } else {
    
  }
  recordmusic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recordmusic);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
}

// optional int64 encode_config_id = 38;
void VideoInfo::clear_encode_config_id() {
  encode_config_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VideoInfo::encode_config_id() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.encode_config_id)
  return encode_config_id_;
}
void VideoInfo::set_encode_config_id(::google::protobuf::int64 value) {
  
  encode_config_id_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.encode_config_id)
}

// optional int64 origin_duration = 39;
void VideoInfo::clear_origin_duration() {
  origin_duration_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VideoInfo::origin_duration() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.origin_duration)
  return origin_duration_;
}
void VideoInfo::set_origin_duration(::google::protobuf::int64 value) {
  
  origin_duration_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.origin_duration)
}

// optional string beatsEnabled = 40;
void VideoInfo::clear_beatsenabled() {
  beatsenabled_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::beatsenabled() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
  return beatsenabled_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_beatsenabled(const ::std::string& value) {
  
  beatsenabled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
}
void VideoInfo::set_beatsenabled(const char* value) {
  
  beatsenabled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
}
void VideoInfo::set_beatsenabled(const char* value, size_t size) {
  
  beatsenabled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
}
::std::string* VideoInfo::mutable_beatsenabled() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
  return beatsenabled_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_beatsenabled() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
  
  return beatsenabled_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_beatsenabled(::std::string* beatsenabled) {
  if (beatsenabled != NULL) {
    
  } else {
    
  }
  beatsenabled_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beatsenabled);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
}

// optional int32 rotationDegree = 41;
void VideoInfo::clear_rotationdegree() {
  rotationdegree_ = 0;
}
::google::protobuf::int32 VideoInfo::rotationdegree() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.rotationDegree)
  return rotationdegree_;
}
void VideoInfo::set_rotationdegree(::google::protobuf::int32 value) {
  
  rotationdegree_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.rotationDegree)
}

inline const VideoInfo* VideoInfo::internal_default_instance() {
  return &VideoInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace gifshow
}  // namespace yxcorp
}  // namespace com

// @@protoc_insertion_point(global_scope)
