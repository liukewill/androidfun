// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoContext.proto

#ifndef PROTOBUF_VideoContext_2eproto__INCLUDED
#define PROTOBUF_VideoContext_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace yxcorp {
namespace gifshow {
namespace core {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_VideoContext_2eproto();
void protobuf_InitDefaults_VideoContext_2eproto();
void protobuf_AssignDesc_VideoContext_2eproto();
void protobuf_ShutdownFile_VideoContext_2eproto();

class VideoInfo;

// ===================================================================

class VideoInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.yxcorp.gifshow.core.VideoInfo) */ {
 public:
  VideoInfo();
  virtual ~VideoInfo();

  VideoInfo(const VideoInfo& from);

  inline VideoInfo& operator=(const VideoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoInfo& default_instance();

  static const VideoInfo* internal_default_instance();

  void Swap(VideoInfo* other);

  // implements Message ----------------------------------------------

  inline VideoInfo* New() const { return New(NULL); }

  VideoInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoInfo& from);
  void MergeFrom(const VideoInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoInfo* other);
  void UnsafeMergeFrom(const VideoInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string theme = 1;
  void clear_theme();
  static const int kThemeFieldNumber = 1;
  const ::std::string& theme() const;
  void set_theme(const ::std::string& value);
  void set_theme(const char* value);
  void set_theme(const char* value, size_t size);
  ::std::string* mutable_theme();
  ::std::string* release_theme();
  void set_allocated_theme(::std::string* theme);

  // optional string cutRanges = 2;
  void clear_cutranges();
  static const int kCutRangesFieldNumber = 2;
  const ::std::string& cutranges() const;
  void set_cutranges(const ::std::string& value);
  void set_cutranges(const char* value);
  void set_cutranges(const char* value, size_t size);
  ::std::string* mutable_cutranges();
  ::std::string* release_cutranges();
  void set_allocated_cutranges(::std::string* cutranges);

  // optional string editorVersion = 3;
  void clear_editorversion();
  static const int kEditorVersionFieldNumber = 3;
  const ::std::string& editorversion() const;
  void set_editorversion(const ::std::string& value);
  void set_editorversion(const char* value);
  void set_editorversion(const char* value, size_t size);
  ::std::string* mutable_editorversion();
  ::std::string* release_editorversion();
  void set_allocated_editorversion(::std::string* editorversion);

  // optional double record_start_cpu_utilization = 4;
  void clear_record_start_cpu_utilization();
  static const int kRecordStartCpuUtilizationFieldNumber = 4;
  double record_start_cpu_utilization() const;
  void set_record_start_cpu_utilization(double value);

  // optional double record_finish_cpu_utilization = 5;
  void clear_record_finish_cpu_utilization();
  static const int kRecordFinishCpuUtilizationFieldNumber = 5;
  double record_finish_cpu_utilization() const;
  void set_record_finish_cpu_utilization(double value);

  // optional double record_start_used_mem = 6;
  void clear_record_start_used_mem();
  static const int kRecordStartUsedMemFieldNumber = 6;
  double record_start_used_mem() const;
  void set_record_start_used_mem(double value);

  // optional double record_finish_used_mem = 7;
  void clear_record_finish_used_mem();
  static const int kRecordFinishUsedMemFieldNumber = 7;
  double record_finish_used_mem() const;
  void set_record_finish_used_mem(double value);

  // optional int32 record_start_battery_temperature = 8;
  void clear_record_start_battery_temperature();
  static const int kRecordStartBatteryTemperatureFieldNumber = 8;
  ::google::protobuf::int32 record_start_battery_temperature() const;
  void set_record_start_battery_temperature(::google::protobuf::int32 value);

  // optional int32 record_finish_battery_temperature = 9;
  void clear_record_finish_battery_temperature();
  static const int kRecordFinishBatteryTemperatureFieldNumber = 9;
  ::google::protobuf::int32 record_finish_battery_temperature() const;
  void set_record_finish_battery_temperature(::google::protobuf::int32 value);

  // optional int32 record_start_battery_level = 10;
  void clear_record_start_battery_level();
  static const int kRecordStartBatteryLevelFieldNumber = 10;
  ::google::protobuf::int32 record_start_battery_level() const;
  void set_record_start_battery_level(::google::protobuf::int32 value);

  // optional int32 record_finish_battery_level = 11;
  void clear_record_finish_battery_level();
  static const int kRecordFinishBatteryLevelFieldNumber = 11;
  ::google::protobuf::int32 record_finish_battery_level() const;
  void set_record_finish_battery_level(::google::protobuf::int32 value);

  // optional bool record_start_is_charing = 12;
  void clear_record_start_is_charing();
  static const int kRecordStartIsCharingFieldNumber = 12;
  bool record_start_is_charing() const;
  void set_record_start_is_charing(bool value);

  // optional bool record_finish_is_charing = 13;
  void clear_record_finish_is_charing();
  static const int kRecordFinishIsCharingFieldNumber = 13;
  bool record_finish_is_charing() const;
  void set_record_finish_is_charing(bool value);

  // optional string encode_type = 14;
  void clear_encode_type();
  static const int kEncodeTypeFieldNumber = 14;
  const ::std::string& encode_type() const;
  void set_encode_type(const ::std::string& value);
  void set_encode_type(const char* value);
  void set_encode_type(const char* value, size_t size);
  ::std::string* mutable_encode_type();
  ::std::string* release_encode_type();
  void set_allocated_encode_type(::std::string* encode_type);

  // optional string recorder_name = 15;
  void clear_recorder_name();
  static const int kRecorderNameFieldNumber = 15;
  const ::std::string& recorder_name() const;
  void set_recorder_name(const ::std::string& value);
  void set_recorder_name(const char* value);
  void set_recorder_name(const char* value, size_t size);
  ::std::string* mutable_recorder_name();
  ::std::string* release_recorder_name();
  void set_allocated_recorder_name(::std::string* recorder_name);

  // optional int32 hw_bitrate = 16;
  void clear_hw_bitrate();
  static const int kHwBitrateFieldNumber = 16;
  ::google::protobuf::int32 hw_bitrate() const;
  void set_hw_bitrate(::google::protobuf::int32 value);

  // optional double real_fps = 17;
  void clear_real_fps();
  static const int kRealFpsFieldNumber = 17;
  double real_fps() const;
  void set_real_fps(double value);

  // optional string Author = 18;
  void clear_author();
  static const int kAuthorFieldNumber = 18;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // optional string Meta = 19;
  void clear_meta();
  static const int kMetaFieldNumber = 19;
  const ::std::string& meta() const;
  void set_meta(const ::std::string& value);
  void set_meta(const char* value);
  void set_meta(const char* value, size_t size);
  ::std::string* mutable_meta();
  ::std::string* release_meta();
  void set_allocated_meta(::std::string* meta);

  // optional string Source = 20;
  void clear_source();
  static const int kSourceFieldNumber = 20;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional int64 Duration = 21;
  void clear_duration();
  static const int kDurationFieldNumber = 21;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // optional int64 Time = 22;
  void clear_time();
  static const int kTimeFieldNumber = 22;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional string Camera = 23;
  void clear_camera();
  static const int kCameraFieldNumber = 23;
  const ::std::string& camera() const;
  void set_camera(const ::std::string& value);
  void set_camera(const char* value);
  void set_camera(const char* value, size_t size);
  ::std::string* mutable_camera();
  ::std::string* release_camera();
  void set_allocated_camera(::std::string* camera);

  // optional string Filter = 24;
  void clear_filter();
  static const int kFilterFieldNumber = 24;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // optional float FilterValue = 25;
  void clear_filtervalue();
  static const int kFilterValueFieldNumber = 25;
  float filtervalue() const;
  void set_filtervalue(float value);

  // optional int32 Separate = 26;
  void clear_separate();
  static const int kSeparateFieldNumber = 26;
  ::google::protobuf::int32 separate() const;
  void set_separate(::google::protobuf::int32 value);

  // optional string Import = 27;
  void clear_import();
  static const int kImportFieldNumber = 27;
  const ::std::string& import() const;
  void set_import(const ::std::string& value);
  void set_import(const char* value);
  void set_import(const char* value, size_t size);
  ::std::string* mutable_import();
  ::std::string* release_import();
  void set_allocated_import(::std::string* import);

  // optional int32 Photo = 28;
  void clear_photo();
  static const int kPhotoFieldNumber = 28;
  ::google::protobuf::int32 photo() const;
  void set_photo(::google::protobuf::int32 value);

  // optional string FromPage = 29;
  void clear_frompage();
  static const int kFromPageFieldNumber = 29;
  const ::std::string& frompage() const;
  void set_frompage(const ::std::string& value);
  void set_frompage(const char* value);
  void set_frompage(const char* value, size_t size);
  ::std::string* mutable_frompage();
  ::std::string* release_frompage();
  void set_allocated_frompage(::std::string* frompage);

  // optional int64 CreateTime = 30;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 30;
  ::google::protobuf::int64 createtime() const;
  void set_createtime(::google::protobuf::int64 value);

  // optional int32 origin_width = 31;
  void clear_origin_width();
  static const int kOriginWidthFieldNumber = 31;
  ::google::protobuf::int32 origin_width() const;
  void set_origin_width(::google::protobuf::int32 value);

  // optional int32 origin_height = 32;
  void clear_origin_height();
  static const int kOriginHeightFieldNumber = 32;
  ::google::protobuf::int32 origin_height() const;
  void set_origin_height(::google::protobuf::int32 value);

  // optional int64 origin_length = 33;
  void clear_origin_length();
  static const int kOriginLengthFieldNumber = 33;
  ::google::protobuf::int64 origin_length() const;
  void set_origin_length(::google::protobuf::int64 value);

  // optional string file_path = 34;
  void clear_file_path();
  static const int kFilePathFieldNumber = 34;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // optional string Music = 35;
  void clear_music();
  static const int kMusicFieldNumber = 35;
  const ::std::string& music() const;
  void set_music(const ::std::string& value);
  void set_music(const char* value);
  void set_music(const char* value, size_t size);
  ::std::string* mutable_music();
  ::std::string* release_music();
  void set_allocated_music(::std::string* music);

  // optional string OnlineMusic = 36;
  void clear_onlinemusic();
  static const int kOnlineMusicFieldNumber = 36;
  const ::std::string& onlinemusic() const;
  void set_onlinemusic(const ::std::string& value);
  void set_onlinemusic(const char* value);
  void set_onlinemusic(const char* value, size_t size);
  ::std::string* mutable_onlinemusic();
  ::std::string* release_onlinemusic();
  void set_allocated_onlinemusic(::std::string* onlinemusic);

  // optional string RecordMusic = 37;
  void clear_recordmusic();
  static const int kRecordMusicFieldNumber = 37;
  const ::std::string& recordmusic() const;
  void set_recordmusic(const ::std::string& value);
  void set_recordmusic(const char* value);
  void set_recordmusic(const char* value, size_t size);
  ::std::string* mutable_recordmusic();
  ::std::string* release_recordmusic();
  void set_allocated_recordmusic(::std::string* recordmusic);

  // optional int64 encode_config_id = 38;
  void clear_encode_config_id();
  static const int kEncodeConfigIdFieldNumber = 38;
  ::google::protobuf::int64 encode_config_id() const;
  void set_encode_config_id(::google::protobuf::int64 value);

  // optional int64 origin_duration = 39;
  void clear_origin_duration();
  static const int kOriginDurationFieldNumber = 39;
  ::google::protobuf::int64 origin_duration() const;
  void set_origin_duration(::google::protobuf::int64 value);

  // optional string beatsEnabled = 40;
  void clear_beatsenabled();
  static const int kBeatsEnabledFieldNumber = 40;
  const ::std::string& beatsenabled() const;
  void set_beatsenabled(const ::std::string& value);
  void set_beatsenabled(const char* value);
  void set_beatsenabled(const char* value, size_t size);
  ::std::string* mutable_beatsenabled();
  ::std::string* release_beatsenabled();
  void set_allocated_beatsenabled(::std::string* beatsenabled);

  // optional int32 rotationDegree = 41;
  void clear_rotationdegree();
  static const int kRotationDegreeFieldNumber = 41;
  ::google::protobuf::int32 rotationdegree() const;
  void set_rotationdegree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.yxcorp.gifshow.core.VideoInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr theme_;
  ::google::protobuf::internal::ArenaStringPtr cutranges_;
  ::google::protobuf::internal::ArenaStringPtr editorversion_;
  ::google::protobuf::internal::ArenaStringPtr encode_type_;
  ::google::protobuf::internal::ArenaStringPtr recorder_name_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr meta_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr camera_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr import_;
  ::google::protobuf::internal::ArenaStringPtr frompage_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::google::protobuf::internal::ArenaStringPtr music_;
  ::google::protobuf::internal::ArenaStringPtr onlinemusic_;
  ::google::protobuf::internal::ArenaStringPtr recordmusic_;
  ::google::protobuf::internal::ArenaStringPtr beatsenabled_;
  double record_start_cpu_utilization_;
  double record_finish_cpu_utilization_;
  double record_start_used_mem_;
  double record_finish_used_mem_;
  ::google::protobuf::int32 record_start_battery_temperature_;
  ::google::protobuf::int32 record_finish_battery_temperature_;
  ::google::protobuf::int32 record_start_battery_level_;
  ::google::protobuf::int32 record_finish_battery_level_;
  bool record_start_is_charing_;
  bool record_finish_is_charing_;
  ::google::protobuf::int32 hw_bitrate_;
  double real_fps_;
  ::google::protobuf::int64 duration_;
  ::google::protobuf::int64 time_;
  float filtervalue_;
  ::google::protobuf::int32 separate_;
  ::google::protobuf::int32 photo_;
  ::google::protobuf::int32 origin_width_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 origin_length_;
  ::google::protobuf::int32 origin_height_;
  ::google::protobuf::int32 rotationdegree_;
  ::google::protobuf::int64 encode_config_id_;
  ::google::protobuf::int64 origin_duration_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_VideoContext_2eproto_impl();
  friend void  protobuf_AddDesc_VideoContext_2eproto_impl();
  friend void protobuf_AssignDesc_VideoContext_2eproto();
  friend void protobuf_ShutdownFile_VideoContext_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoInfo> VideoInfo_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoInfo

// optional string theme = 1;
inline void VideoInfo::clear_theme() {
  theme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::theme() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.theme)
  return theme_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_theme(const ::std::string& value) {
  
  theme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.theme)
}
inline void VideoInfo::set_theme(const char* value) {
  
  theme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.theme)
}
inline void VideoInfo::set_theme(const char* value, size_t size) {
  
  theme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.theme)
}
inline ::std::string* VideoInfo::mutable_theme() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.theme)
  return theme_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_theme() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.theme)
  
  return theme_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_theme(::std::string* theme) {
  if (theme != NULL) {
    
  } else {
    
  }
  theme_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), theme);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.theme)
}

// optional string cutRanges = 2;
inline void VideoInfo::clear_cutranges() {
  cutranges_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::cutranges() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
  return cutranges_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_cutranges(const ::std::string& value) {
  
  cutranges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
}
inline void VideoInfo::set_cutranges(const char* value) {
  
  cutranges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
}
inline void VideoInfo::set_cutranges(const char* value, size_t size) {
  
  cutranges_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
}
inline ::std::string* VideoInfo::mutable_cutranges() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
  return cutranges_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_cutranges() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
  
  return cutranges_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_cutranges(::std::string* cutranges) {
  if (cutranges != NULL) {
    
  } else {
    
  }
  cutranges_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cutranges);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.cutRanges)
}

// optional string editorVersion = 3;
inline void VideoInfo::clear_editorversion() {
  editorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::editorversion() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
  return editorversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_editorversion(const ::std::string& value) {
  
  editorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
}
inline void VideoInfo::set_editorversion(const char* value) {
  
  editorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
}
inline void VideoInfo::set_editorversion(const char* value, size_t size) {
  
  editorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
}
inline ::std::string* VideoInfo::mutable_editorversion() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
  return editorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_editorversion() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
  
  return editorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_editorversion(::std::string* editorversion) {
  if (editorversion != NULL) {
    
  } else {
    
  }
  editorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), editorversion);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.editorVersion)
}

// optional double record_start_cpu_utilization = 4;
inline void VideoInfo::clear_record_start_cpu_utilization() {
  record_start_cpu_utilization_ = 0;
}
inline double VideoInfo::record_start_cpu_utilization() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_cpu_utilization)
  return record_start_cpu_utilization_;
}
inline void VideoInfo::set_record_start_cpu_utilization(double value) {
  
  record_start_cpu_utilization_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_cpu_utilization)
}

// optional double record_finish_cpu_utilization = 5;
inline void VideoInfo::clear_record_finish_cpu_utilization() {
  record_finish_cpu_utilization_ = 0;
}
inline double VideoInfo::record_finish_cpu_utilization() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_cpu_utilization)
  return record_finish_cpu_utilization_;
}
inline void VideoInfo::set_record_finish_cpu_utilization(double value) {
  
  record_finish_cpu_utilization_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_cpu_utilization)
}

// optional double record_start_used_mem = 6;
inline void VideoInfo::clear_record_start_used_mem() {
  record_start_used_mem_ = 0;
}
inline double VideoInfo::record_start_used_mem() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_used_mem)
  return record_start_used_mem_;
}
inline void VideoInfo::set_record_start_used_mem(double value) {
  
  record_start_used_mem_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_used_mem)
}

// optional double record_finish_used_mem = 7;
inline void VideoInfo::clear_record_finish_used_mem() {
  record_finish_used_mem_ = 0;
}
inline double VideoInfo::record_finish_used_mem() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_used_mem)
  return record_finish_used_mem_;
}
inline void VideoInfo::set_record_finish_used_mem(double value) {
  
  record_finish_used_mem_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_used_mem)
}

// optional int32 record_start_battery_temperature = 8;
inline void VideoInfo::clear_record_start_battery_temperature() {
  record_start_battery_temperature_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::record_start_battery_temperature() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_battery_temperature)
  return record_start_battery_temperature_;
}
inline void VideoInfo::set_record_start_battery_temperature(::google::protobuf::int32 value) {
  
  record_start_battery_temperature_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_battery_temperature)
}

// optional int32 record_finish_battery_temperature = 9;
inline void VideoInfo::clear_record_finish_battery_temperature() {
  record_finish_battery_temperature_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::record_finish_battery_temperature() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_battery_temperature)
  return record_finish_battery_temperature_;
}
inline void VideoInfo::set_record_finish_battery_temperature(::google::protobuf::int32 value) {
  
  record_finish_battery_temperature_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_battery_temperature)
}

// optional int32 record_start_battery_level = 10;
inline void VideoInfo::clear_record_start_battery_level() {
  record_start_battery_level_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::record_start_battery_level() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_battery_level)
  return record_start_battery_level_;
}
inline void VideoInfo::set_record_start_battery_level(::google::protobuf::int32 value) {
  
  record_start_battery_level_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_battery_level)
}

// optional int32 record_finish_battery_level = 11;
inline void VideoInfo::clear_record_finish_battery_level() {
  record_finish_battery_level_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::record_finish_battery_level() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_battery_level)
  return record_finish_battery_level_;
}
inline void VideoInfo::set_record_finish_battery_level(::google::protobuf::int32 value) {
  
  record_finish_battery_level_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_battery_level)
}

// optional bool record_start_is_charing = 12;
inline void VideoInfo::clear_record_start_is_charing() {
  record_start_is_charing_ = false;
}
inline bool VideoInfo::record_start_is_charing() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_start_is_charing)
  return record_start_is_charing_;
}
inline void VideoInfo::set_record_start_is_charing(bool value) {
  
  record_start_is_charing_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_start_is_charing)
}

// optional bool record_finish_is_charing = 13;
inline void VideoInfo::clear_record_finish_is_charing() {
  record_finish_is_charing_ = false;
}
inline bool VideoInfo::record_finish_is_charing() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.record_finish_is_charing)
  return record_finish_is_charing_;
}
inline void VideoInfo::set_record_finish_is_charing(bool value) {
  
  record_finish_is_charing_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.record_finish_is_charing)
}

// optional string encode_type = 14;
inline void VideoInfo::clear_encode_type() {
  encode_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::encode_type() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.encode_type)
  return encode_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_encode_type(const ::std::string& value) {
  
  encode_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.encode_type)
}
inline void VideoInfo::set_encode_type(const char* value) {
  
  encode_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.encode_type)
}
inline void VideoInfo::set_encode_type(const char* value, size_t size) {
  
  encode_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.encode_type)
}
inline ::std::string* VideoInfo::mutable_encode_type() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.encode_type)
  return encode_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_encode_type() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.encode_type)
  
  return encode_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_encode_type(::std::string* encode_type) {
  if (encode_type != NULL) {
    
  } else {
    
  }
  encode_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encode_type);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.encode_type)
}

// optional string recorder_name = 15;
inline void VideoInfo::clear_recorder_name() {
  recorder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::recorder_name() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
  return recorder_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_recorder_name(const ::std::string& value) {
  
  recorder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
}
inline void VideoInfo::set_recorder_name(const char* value) {
  
  recorder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
}
inline void VideoInfo::set_recorder_name(const char* value, size_t size) {
  
  recorder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
}
inline ::std::string* VideoInfo::mutable_recorder_name() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
  return recorder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_recorder_name() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
  
  return recorder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_recorder_name(::std::string* recorder_name) {
  if (recorder_name != NULL) {
    
  } else {
    
  }
  recorder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recorder_name);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.recorder_name)
}

// optional int32 hw_bitrate = 16;
inline void VideoInfo::clear_hw_bitrate() {
  hw_bitrate_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::hw_bitrate() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.hw_bitrate)
  return hw_bitrate_;
}
inline void VideoInfo::set_hw_bitrate(::google::protobuf::int32 value) {
  
  hw_bitrate_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.hw_bitrate)
}

// optional double real_fps = 17;
inline void VideoInfo::clear_real_fps() {
  real_fps_ = 0;
}
inline double VideoInfo::real_fps() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.real_fps)
  return real_fps_;
}
inline void VideoInfo::set_real_fps(double value) {
  
  real_fps_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.real_fps)
}

// optional string Author = 18;
inline void VideoInfo::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::author() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Author)
  return author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Author)
}
inline void VideoInfo::set_author(const char* value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Author)
}
inline void VideoInfo::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Author)
}
inline ::std::string* VideoInfo::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_author() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Author)
}

// optional string Meta = 19;
inline void VideoInfo::clear_meta() {
  meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::meta() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Meta)
  return meta_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_meta(const ::std::string& value) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Meta)
}
inline void VideoInfo::set_meta(const char* value) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Meta)
}
inline void VideoInfo::set_meta(const char* value, size_t size) {
  
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Meta)
}
inline ::std::string* VideoInfo::mutable_meta() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Meta)
  return meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_meta() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Meta)
  
  return meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_meta(::std::string* meta) {
  if (meta != NULL) {
    
  } else {
    
  }
  meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meta);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Meta)
}

// optional string Source = 20;
inline void VideoInfo::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::source() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Source)
}
inline void VideoInfo::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Source)
}
inline void VideoInfo::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Source)
}
inline ::std::string* VideoInfo::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_source() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Source)
}

// optional int64 Duration = 21;
inline void VideoInfo::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoInfo::duration() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Duration)
  return duration_;
}
inline void VideoInfo::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Duration)
}

// optional int64 Time = 22;
inline void VideoInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoInfo::time() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Time)
  return time_;
}
inline void VideoInfo::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Time)
}

// optional string Camera = 23;
inline void VideoInfo::clear_camera() {
  camera_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::camera() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Camera)
  return camera_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_camera(const ::std::string& value) {
  
  camera_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Camera)
}
inline void VideoInfo::set_camera(const char* value) {
  
  camera_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Camera)
}
inline void VideoInfo::set_camera(const char* value, size_t size) {
  
  camera_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Camera)
}
inline ::std::string* VideoInfo::mutable_camera() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Camera)
  return camera_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_camera() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Camera)
  
  return camera_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_camera(::std::string* camera) {
  if (camera != NULL) {
    
  } else {
    
  }
  camera_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Camera)
}

// optional string Filter = 24;
inline void VideoInfo::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::filter() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Filter)
}
inline void VideoInfo::set_filter(const char* value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Filter)
}
inline void VideoInfo::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Filter)
}
inline ::std::string* VideoInfo::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_filter() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Filter)
}

// optional float FilterValue = 25;
inline void VideoInfo::clear_filtervalue() {
  filtervalue_ = 0;
}
inline float VideoInfo::filtervalue() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.FilterValue)
  return filtervalue_;
}
inline void VideoInfo::set_filtervalue(float value) {
  
  filtervalue_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.FilterValue)
}

// optional int32 Separate = 26;
inline void VideoInfo::clear_separate() {
  separate_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::separate() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Separate)
  return separate_;
}
inline void VideoInfo::set_separate(::google::protobuf::int32 value) {
  
  separate_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Separate)
}

// optional string Import = 27;
inline void VideoInfo::clear_import() {
  import_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::import() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Import)
  return import_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_import(const ::std::string& value) {
  
  import_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Import)
}
inline void VideoInfo::set_import(const char* value) {
  
  import_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Import)
}
inline void VideoInfo::set_import(const char* value, size_t size) {
  
  import_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Import)
}
inline ::std::string* VideoInfo::mutable_import() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Import)
  return import_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_import() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Import)
  
  return import_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_import(::std::string* import) {
  if (import != NULL) {
    
  } else {
    
  }
  import_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), import);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Import)
}

// optional int32 Photo = 28;
inline void VideoInfo::clear_photo() {
  photo_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::photo() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Photo)
  return photo_;
}
inline void VideoInfo::set_photo(::google::protobuf::int32 value) {
  
  photo_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Photo)
}

// optional string FromPage = 29;
inline void VideoInfo::clear_frompage() {
  frompage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::frompage() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.FromPage)
  return frompage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_frompage(const ::std::string& value) {
  
  frompage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.FromPage)
}
inline void VideoInfo::set_frompage(const char* value) {
  
  frompage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.FromPage)
}
inline void VideoInfo::set_frompage(const char* value, size_t size) {
  
  frompage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.FromPage)
}
inline ::std::string* VideoInfo::mutable_frompage() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.FromPage)
  return frompage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_frompage() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.FromPage)
  
  return frompage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_frompage(::std::string* frompage) {
  if (frompage != NULL) {
    
  } else {
    
  }
  frompage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frompage);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.FromPage)
}

// optional int64 CreateTime = 30;
inline void VideoInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoInfo::createtime() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.CreateTime)
  return createtime_;
}
inline void VideoInfo::set_createtime(::google::protobuf::int64 value) {
  
  createtime_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.CreateTime)
}

// optional int32 origin_width = 31;
inline void VideoInfo::clear_origin_width() {
  origin_width_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::origin_width() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.origin_width)
  return origin_width_;
}
inline void VideoInfo::set_origin_width(::google::protobuf::int32 value) {
  
  origin_width_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.origin_width)
}

// optional int32 origin_height = 32;
inline void VideoInfo::clear_origin_height() {
  origin_height_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::origin_height() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.origin_height)
  return origin_height_;
}
inline void VideoInfo::set_origin_height(::google::protobuf::int32 value) {
  
  origin_height_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.origin_height)
}

// optional int64 origin_length = 33;
inline void VideoInfo::clear_origin_length() {
  origin_length_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoInfo::origin_length() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.origin_length)
  return origin_length_;
}
inline void VideoInfo::set_origin_length(::google::protobuf::int64 value) {
  
  origin_length_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.origin_length)
}

// optional string file_path = 34;
inline void VideoInfo::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::file_path() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.file_path)
}
inline void VideoInfo::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.file_path)
}
inline void VideoInfo::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.file_path)
}
inline ::std::string* VideoInfo::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_file_path() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.file_path)
}

// optional string Music = 35;
inline void VideoInfo::clear_music() {
  music_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::music() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.Music)
  return music_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_music(const ::std::string& value) {
  
  music_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.Music)
}
inline void VideoInfo::set_music(const char* value) {
  
  music_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.Music)
}
inline void VideoInfo::set_music(const char* value, size_t size) {
  
  music_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.Music)
}
inline ::std::string* VideoInfo::mutable_music() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.Music)
  return music_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_music() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.Music)
  
  return music_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_music(::std::string* music) {
  if (music != NULL) {
    
  } else {
    
  }
  music_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), music);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.Music)
}

// optional string OnlineMusic = 36;
inline void VideoInfo::clear_onlinemusic() {
  onlinemusic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::onlinemusic() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
  return onlinemusic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_onlinemusic(const ::std::string& value) {
  
  onlinemusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
}
inline void VideoInfo::set_onlinemusic(const char* value) {
  
  onlinemusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
}
inline void VideoInfo::set_onlinemusic(const char* value, size_t size) {
  
  onlinemusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
}
inline ::std::string* VideoInfo::mutable_onlinemusic() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
  return onlinemusic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_onlinemusic() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
  
  return onlinemusic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_onlinemusic(::std::string* onlinemusic) {
  if (onlinemusic != NULL) {
    
  } else {
    
  }
  onlinemusic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onlinemusic);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.OnlineMusic)
}

// optional string RecordMusic = 37;
inline void VideoInfo::clear_recordmusic() {
  recordmusic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::recordmusic() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
  return recordmusic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_recordmusic(const ::std::string& value) {
  
  recordmusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
}
inline void VideoInfo::set_recordmusic(const char* value) {
  
  recordmusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
}
inline void VideoInfo::set_recordmusic(const char* value, size_t size) {
  
  recordmusic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
}
inline ::std::string* VideoInfo::mutable_recordmusic() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
  return recordmusic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_recordmusic() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
  
  return recordmusic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_recordmusic(::std::string* recordmusic) {
  if (recordmusic != NULL) {
    
  } else {
    
  }
  recordmusic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recordmusic);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.RecordMusic)
}

// optional int64 encode_config_id = 38;
inline void VideoInfo::clear_encode_config_id() {
  encode_config_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoInfo::encode_config_id() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.encode_config_id)
  return encode_config_id_;
}
inline void VideoInfo::set_encode_config_id(::google::protobuf::int64 value) {
  
  encode_config_id_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.encode_config_id)
}

// optional int64 origin_duration = 39;
inline void VideoInfo::clear_origin_duration() {
  origin_duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VideoInfo::origin_duration() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.origin_duration)
  return origin_duration_;
}
inline void VideoInfo::set_origin_duration(::google::protobuf::int64 value) {
  
  origin_duration_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.origin_duration)
}

// optional string beatsEnabled = 40;
inline void VideoInfo::clear_beatsenabled() {
  beatsenabled_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::beatsenabled() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
  return beatsenabled_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_beatsenabled(const ::std::string& value) {
  
  beatsenabled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
}
inline void VideoInfo::set_beatsenabled(const char* value) {
  
  beatsenabled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
}
inline void VideoInfo::set_beatsenabled(const char* value, size_t size) {
  
  beatsenabled_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
}
inline ::std::string* VideoInfo::mutable_beatsenabled() {
  
  // @@protoc_insertion_point(field_mutable:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
  return beatsenabled_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_beatsenabled() {
  // @@protoc_insertion_point(field_release:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
  
  return beatsenabled_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_beatsenabled(::std::string* beatsenabled) {
  if (beatsenabled != NULL) {
    
  } else {
    
  }
  beatsenabled_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beatsenabled);
  // @@protoc_insertion_point(field_set_allocated:com.yxcorp.gifshow.core.VideoInfo.beatsEnabled)
}

// optional int32 rotationDegree = 41;
inline void VideoInfo::clear_rotationdegree() {
  rotationdegree_ = 0;
}
inline ::google::protobuf::int32 VideoInfo::rotationdegree() const {
  // @@protoc_insertion_point(field_get:com.yxcorp.gifshow.core.VideoInfo.rotationDegree)
  return rotationdegree_;
}
inline void VideoInfo::set_rotationdegree(::google::protobuf::int32 value) {
  
  rotationdegree_ = value;
  // @@protoc_insertion_point(field_set:com.yxcorp.gifshow.core.VideoInfo.rotationDegree)
}

inline const VideoInfo* VideoInfo::internal_default_instance() {
  return &VideoInfo_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace gifshow
}  // namespace yxcorp
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VideoContext_2eproto__INCLUDED
